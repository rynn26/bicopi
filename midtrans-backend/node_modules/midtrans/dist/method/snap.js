"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class SnapApi {
    constructor({ api }) {
        this.api = api;
    }
    /**
   * Do `/transactions` API request to Snap API
   * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://snap-docs.midtrans.com)
   * @return {Promise} - Promise contains Object from JSON decoded response
   */
    createTransaction(parameter) {
        return __awaiter(this, void 0, void 0, function* () {
            let apiUrl = this.api.snapUrl + '/transactions';
            let responsePromise = yield this.api.post({
                url: apiUrl,
                data: parameter
            });
            return responsePromise;
        });
    }
    /**
     * Wrapper function that call `createTransaction` then:
     * @return {Promise} - Promise of String token
     */
    createTransactionToken(parameter) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.createTransaction(parameter);
            return res.token;
        });
    }
    /**
     * Wrapper function that call `createTransaction` then:
     * @return {Promise} - Promise of String redirect_url
     */
    createTransactionRedirectUrl(parameter) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.createTransaction(parameter);
            return res.redirect_url;
        });
    }
}
;
exports.default = SnapApi;
