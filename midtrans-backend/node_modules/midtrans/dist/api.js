"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const config_1 = require("./config");
class Api {
    constructor({ serverKey, isProduction }) {
        this.config = config_1.config;
        this.serverKey = serverKey;
        this.isProduction = isProduction;
        this.axios = axios_1.default.create();
    }
    /**
     * Get Statis Snap Url
     * @returns String
     */
    get snapUrl() {
        if (this.isProduction === true) {
            return this.config.snap.production;
        }
        else {
            return this.config.snap.sandbox;
        }
    }
    ;
    /**
     * Get Statis Core Api Url
     * @returns String
     */
    get coreUrl() {
        if (this.isProduction === true) {
            return this.config.core.production;
        }
        else {
            return this.config.core.sandbox;
        }
    }
    ;
    /**
     * Get Statis Iris Url
     * @returns String
     */
    get irisUrl() {
        if (this.isProduction === true) {
            return this.config.iris.production;
        }
        else {
            return this.config.iris.sandbox;
        }
    }
    ;
    get(_a) {
        return __awaiter(this, arguments, void 0, function* ({ url, data, headers }) {
            try {
                const response = yield this.axios.get(url, {
                    headers: Object.assign({ 'content-type': 'application/json', 'accept': 'application/json', 'user-agent': 'midtransclient-nodejs/1.3.0' }, headers),
                    params: JSON.stringify(data),
                    auth: {
                        username: this.serverKey,
                        password: ""
                    }
                });
                return response.data;
            }
            catch (error) {
                return error.response;
            }
        });
    }
    ;
    post(_a) {
        return __awaiter(this, arguments, void 0, function* ({ url, data, headers }) {
            try {
                const response = yield this.axios.post(url, data, {
                    headers: Object.assign({ 'content-type': 'application/json', 'accept': 'application/json', 'user-agent': 'midtransclient-nodejs/1.3.0' }, headers),
                    auth: {
                        username: this.serverKey,
                        password: ""
                    }
                });
                return response.data;
            }
            catch (error) {
                return error.response;
            }
        });
    }
    ;
    patch(_a) {
        return __awaiter(this, arguments, void 0, function* ({ url, data, headers }) {
            try {
                const response = yield this.axios.patch(url, data, {
                    headers: Object.assign({ 'content-type': 'application/json', 'accept': 'application/json', 'user-agent': 'midtransclient-nodejs/1.3.0' }, headers),
                    auth: {
                        username: this.serverKey,
                        password: ""
                    }
                });
                return response.data;
            }
            catch (error) {
                return error.response;
            }
        });
    }
    ;
}
exports.default = Api;
