"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class CoreApi {
    constructor({ api }) {
        /**
       * Do `/v2/charge` API request to Core API
       * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://api-docs.midtrans.com)
       * @return {Promise} - Promise contains Object from JSON decoded response
       */
        this.charge = (parameter) => __awaiter(this, void 0, void 0, function* () {
            let apiUrl = this.api.coreUrl + '/v2/charge';
            let responsePromise = yield this.api.post({
                url: apiUrl,
                data: parameter
            });
            return responsePromise;
        });
        /**
         * Do `/v2/capture` API request to Core API
         * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://api-docs.midtrans.com)
         * @return {Promise} - Promise contains Object from JSON decoded response
         */
        this.capture = (...args_1) => __awaiter(this, [...args_1], void 0, function* (parameter = {}) {
            let apiUrl = this.api.coreUrl + '/v2/capture';
            let responsePromise = yield this.api.post({
                url: apiUrl,
                data: parameter
            });
            return responsePromise;
        });
        /**
         * Do `/v2/card/register` API request to Core API
         * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://api-docs.midtrans.com)
         * @return {Promise} - Promise contains Object from JSON decoded response
         */
        this.cardRegister = (...args_1) => __awaiter(this, [...args_1], void 0, function* (parameter = {}) {
            let apiUrl = this.api.coreUrl + '/v2/card/register';
            let responsePromise = yield this.api.get({
                url: apiUrl,
                data: parameter
            });
            return responsePromise;
        });
        /**
         * Do `/v2/token` API request to Core API
         * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://api-docs.midtrans.com)
         * @return {Promise} - Promise contains Object from JSON decoded response
         */
        this.cardToken = (...args_1) => __awaiter(this, [...args_1], void 0, function* (parameter = {}) {
            let apiUrl = this.api.coreUrl + '/v2/token';
            let responsePromise = yield this.api.get({
                url: apiUrl,
                data: parameter
            });
            return responsePromise;
        });
        /**
         * Do `/v2/point_inquiry/<tokenId>` API request to Core API
         * @param  {String} tokenId - tokenId of credit card (more params detail refer to: https://api-docs.midtrans.com)
         * @return {Promise} - Promise contains Object from JSON decoded response
         */
        this.cardPointInquiry = (tokenId) => __awaiter(this, void 0, void 0, function* () {
            let apiUrl = this.api.coreUrl + '/v2/point_inquiry/' + tokenId;
            let responsePromise = yield this.api.get({
                url: apiUrl,
            });
            return responsePromise;
        });
        /**
         * Create `/v2/pay/account` API request to Core API
         * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://api-docs.midtrans.com/#create-pay-account)
         * @return {Promise} - Promise contains Object from JSON decoded response
         */
        this.linkPaymentAccount = (...args_1) => __awaiter(this, [...args_1], void 0, function* (parameter = {}) {
            let apiUrl = this.api.coreUrl + '/v2/pay/account';
            let responsePromise = yield this.api.post({
                url: apiUrl,
                data: parameter
            });
            return responsePromise;
        });
        /**
         * Do `/v2/pay/account/<accountId>` API request to Core API
         * @param  {String} accountId - accountId for specific payment channel (more params detail refer to: https://api-docs.midtrans.com/#get-pay-account)
         * @return {Promise} - Promise contains Object from JSON decoded response
         */
        this.getPaymentAccount = (accountId) => __awaiter(this, void 0, void 0, function* () {
            let apiUrl = this.api.coreUrl + '/v2/pay/account/' + accountId;
            let responsePromise = yield this.api.get({ url: apiUrl });
            return responsePromise;
        });
        /**
         * Unbind `/v2/pay/account/<accountId>/unbind` API request to Core API
         * @param  {String} accountId - accountId for specific payment channel (more params detail refer to: https://api-docs.midtrans.com/#unbind-pay-account)
         * @return {Promise} - Promise contains Object from JSON decoded response
         */
        this.unlinkPaymentAccount = (accountId) => __awaiter(this, void 0, void 0, function* () {
            let apiUrl = this.api.coreUrl + '/v2/pay/account/' + accountId + '/unbind';
            let responsePromise = yield this.api.post({ url: apiUrl });
            return responsePromise;
        });
        /**
         * Create `/v1/subscription` API request to Core API
         * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://api-docs.midtrans.com/#create-subscription)
         * @return {Promise} - Promise contains Object from JSON decoded response
         */
        this.createSubscription = (...args_1) => __awaiter(this, [...args_1], void 0, function* (parameter = {}) {
            let apiUrl = this.api.coreUrl + '/v1/subscriptions';
            let responsePromise = yield this.api.post({ url: apiUrl, data: parameter });
            return responsePromise;
        });
        /**
         * Do `/v1/subscription/<subscriptionId>` API request to Core API
         * @param  {String} subscriptionId - subscriptionId given by Midtrans (more params detail refer to: https://api-docs.midtrans.com/#get-subscription)
         * @return {Promise} - Promise contains Object from JSON decoded response
         */
        this.getSubscription = (subscriptionId) => __awaiter(this, void 0, void 0, function* () {
            let apiUrl = this.api.coreUrl + '/v1/subscriptions/' + subscriptionId;
            let responsePromise = yield this.api.get({ url: apiUrl });
            return responsePromise;
        });
        /**
         * Do `/v1/subscription/<subscriptionId>/disable` API request to Core API
         * @param  {String} subscriptionId - subscriptionId given by Midtrans (more params detail refer to: https://api-docs.midtrans.com/#disable-subscription)
         * @return {Promise} - Promise contains Object from JSON decoded response
         */
        this.disableSubscription = (subscriptionId) => __awaiter(this, void 0, void 0, function* () {
            let apiUrl = this.api.coreUrl + '/v1/subscriptions/' + subscriptionId + '/disable';
            let responsePromise = yield this.api.post({ url: apiUrl });
            return responsePromise;
        });
        /**
         * Do `/v1/subscription/<subscriptionId>/enable` API request to Core API
         * @param  {String} subscriptionId - subscriptionId given by Midtrans (more params detail refer to: https://api-docs.midtrans.com/#enable-subscription)
         * @return {Promise} - Promise contains Object from JSON decoded response
         */
        this.enableSubscription = (subscriptionId) => __awaiter(this, void 0, void 0, function* () {
            let apiUrl = this.api.coreUrl + '/v1/subscriptions/' + subscriptionId + '/enable';
            let responsePromise = yield this.api.post({ url: apiUrl });
            return responsePromise;
        });
        /**
         * Do update subscription `/v1/subscription/<subscriptionId>` API request to Core API
         * @param  {String} subscriptionId - subscriptionId given by Midtrans (more params detail refer to: https://api-docs.midtrans.com/#update-subscription)
         * @return {Promise} - Promise contains Object from JSON decoded response
         */
        this.updateSubscription = (subscriptionId_1, ...args_1) => __awaiter(this, [subscriptionId_1, ...args_1], void 0, function* (subscriptionId, parameter = {}) {
            let apiUrl = this.api.coreUrl + '/v1/subscriptions/' + subscriptionId;
            let responsePromise = yield this.api.patch({
                url: apiUrl,
                data: parameter
            });
            return responsePromise;
        });
        this.api = api;
    }
    ;
}
;
exports.default = CoreApi;
