"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Midtrans = void 0;
const api_1 = __importDefault(require("./api"));
const coreApi_1 = __importDefault(require("./method/coreApi"));
const snap_1 = __importDefault(require("./method/snap"));
class Midtrans {
    constructor(options) {
        this.api = new api_1.default(options);
        this.core = new coreApi_1.default({ api: this.api });
        this.snap = new snap_1.default({ api: this.api });
    }
    /**
     *
     * @param transactionId
     * @returns
     */
    status(transactionId) {
        return __awaiter(this, void 0, void 0, function* () {
            let apiUrl = this.api.coreUrl + '/v2/' + transactionId + '/status';
            let responsePromise = yield this.api.get({ url: apiUrl });
            return responsePromise;
        });
    }
    ;
    /**
     *
     * @param transactionId
     * @returns any
     */
    statusb2b(transactionId) {
        return __awaiter(this, void 0, void 0, function* () {
            let apiUrl = this.api.coreUrl + '/v2/' + transactionId + '/status/b2b';
            let responsePromise = yield this.api.get({ url: apiUrl });
            return responsePromise;
        });
    }
    ;
    approve(transactionId) {
        return __awaiter(this, void 0, void 0, function* () {
            let apiUrl = this.api.coreUrl + '/v2/' + transactionId + '/approve';
            let responsePromise = yield this.api.post({ url: apiUrl });
            return responsePromise;
        });
    }
    deny(transactionId) {
        return __awaiter(this, void 0, void 0, function* () {
            let apiUrl = this.api.coreUrl + '/v2/' + transactionId + '/deny';
            let responsePromise = yield this.api.post({ url: apiUrl });
            return responsePromise;
        });
    }
    cancel(transactionId) {
        return __awaiter(this, void 0, void 0, function* () {
            let apiUrl = this.api.coreUrl + '/v2/' + transactionId + '/cancel';
            let responsePromise = yield this.api.post({ url: apiUrl });
            return responsePromise;
        });
    }
    expire(transactionId) {
        return __awaiter(this, void 0, void 0, function* () {
            let apiUrl = this.api.coreUrl + '/v2/' + transactionId + '/expire';
            let responsePromise = yield this.api.post({ url: apiUrl });
            return responsePromise;
        });
    }
    refund(transactionId, parameter) {
        return __awaiter(this, void 0, void 0, function* () {
            let apiUrl = this.api.coreUrl + '/v2/' + transactionId + '/refund';
            let responsePromise = yield this.api.post({ url: apiUrl, data: parameter });
            return responsePromise;
        });
    }
    refundDirect(transactionId, parameter) {
        return __awaiter(this, void 0, void 0, function* () {
            let apiUrl = this.api.coreUrl + '/v2/' + transactionId + '/refund/online/direct';
            let responsePromise = yield this.api.post({ url: apiUrl, data: parameter });
            return responsePromise;
        });
    }
    notification(transactionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const status = yield this.status(transactionId);
            return status;
        });
    }
    ;
}
exports.Midtrans = Midtrans;
;
